name: Auto Tag on PR Merge

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  create-tag:
    # Only run if the PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write # Need write permissions to push commit and tag
    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Use v4
        with:
          # Fetch all history so we can check for existing tags accurately
          fetch-depth: 0
          # Check out the main branch explicitly after merge
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x' # Use a consistent Node version
          cache: 'npm'

      - name: Get current version from package.json
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Determine and Set Version
        id: set-version
        run: |
          CURRENT_VERSION=${{ steps.package-version.outputs.current-version }}
          TARGET_VERSION=$CURRENT_VERSION # Default to current version

          # Check if tag already exists
          if git rev-parse "v${CURRENT_VERSION}" >/dev/null 2>&1; then
            echo "Tag v${CURRENT_VERSION} already exists. Calculating next minor version."
            # Use npm itself to increment the minor version safely
            # This assumes Node.js/npm is available
            TARGET_VERSION=$(npm version --no-git-tag-version minor)
            # npm version outputs the new version prefixed with 'v', remove it
            TARGET_VERSION=${TARGET_VERSION#v}
            echo "Calculated next version: ${TARGET_VERSION}"
            # Reset package.json back temporarily as npm version modified it
            # Need to fetch again to ensure we have the latest state before reset?
            # git fetch origin main 
            git reset --hard HEAD~1 
          else
            echo "Tag v${CURRENT_VERSION} does not exist. Using current version."
          fi

          echo "TARGET_VERSION=${TARGET_VERSION}" >> $GITHUB_OUTPUT

      - name: Update package.json and Create Tag
        env:
          TARGET_VERSION: ${{ steps.set-version.outputs.TARGET_VERSION }}
        run: |
          echo "Target version for update and tag: ${TARGET_VERSION}"

          # Configure Git user
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Update package.json with the target version
          # --no-git-tag-version prevents npm from creating a tag
          npm version ${TARGET_VERSION} --no-git-tag-version --no-push --allow-same-version

          echo "package.json updated to version ${TARGET_VERSION}"

          # Add changed files (package.json and potentially package-lock.json)
          git add package.json package-lock.json || true

          # Commit the version bump
          git commit -m "chore: bump version to ${TARGET_VERSION}"

          # Create the Git tag
          echo "Creating Git tag v${TARGET_VERSION}"
          git tag -a "v${TARGET_VERSION}" -m "Release version ${TARGET_VERSION}"

          # Push the commit *and* the tag
          echo "Pushing changes and tag to origin main"
          git push origin main "v${TARGET_VERSION}"

          # Set output for PR comment step
          echo "VERSION=${TARGET_VERSION}" >> $GITHUB_ENV

      - name: Add tag comment to PR
        uses: actions/github-script@v7 # Use v7
        with:
          script: |
            const version = process.env.VERSION
            if (!version) {
              console.log('VERSION environment variable not set. Skipping comment.')
              return
            }
            const prNumber = context.payload.pull_request.number
            const repo = context.repo
            
            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: prNumber,
              body: `âœ… PR was merged and version bumped to \`${version}\`. Tag \`v${version}\` created and pushed.`
            }) 