name: Auto Tag on PR Merge

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  create-tag:
    # Only run if the PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get version from package.json
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1

      - name: Create tag
        run: |
          # Get the current version from package.json
          VERSION=${{ steps.package-version.outputs.current-version }}
          
          # Check if this tag already exists
          if git rev-parse "v${VERSION}" >/dev/null 2>&1; then
            echo "Tag v${VERSION} already exists. Creating a new minor version."
            # Split the version into parts
            IFS='.' read -r -a version_parts <<< "$VERSION"
            MINOR=$((version_parts[1] + 1))
            VERSION="${version_parts[0]}.${MINOR}.0"
          fi

          echo "Creating tag v${VERSION}"
          
          # Create and push the tag
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "v${VERSION}" -m "Release version ${VERSION}"
          git push origin "v${VERSION}"
          
          # Set output for use in later steps
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Add tag comment to PR
        uses: actions/github-script@v6
        with:
          script: |
            const version = process.env.VERSION
            const prNumber = context.payload.pull_request.number
            const repo = context.repo
            
            await github.rest.issues.createComment({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: prNumber,
              body: `âœ… PR was merged and tag v${version} was created!`
            }) 